name: Build (nightly)

on:
  push:
    paths:
    - '.github/workflows/nightly.yml'
  workflow_run:
    workflows: ["Build, Test, and Benchmark", "Build (cabal)"]
    branches: [master]
    types:
      - completed

defaults:
  run:
    shell: bash

jobs:
#  setup:
#    runs-on: Ubuntu-latest
#    outputs:
#      upload-url: ${{ steps.create-release.outputs.upload_url }}
#    steps:
#    - uses: styfle/cancel-workflow-action@0.6.0
#      with:
#        access_token: ${{ github.token }}

#    - name: Generate the short commit SHA
#      id: sha
#      run: |
#        echo ::set-output name=short-sha::${GITHUB_SHA::7}

#    - name: Delete the nightly tag if any
#      uses: dev-drprasad/delete-tag-and-release@v0.1.2
#      continue-on-error: true
#      with:
#        delete_release: true
#        tag_name: nightly
#      env:
#        GITHUB_TOKEN: ${{ github.token }}
#    - name: Create nightly release
#      id: create-release
#      uses: actions/create-release@v1
#      env:
#        GITHUB_TOKEN: ${{ github.token }}
#      with:
#        tag_name: nightly
#        release_name: Nightly build (${{ steps.sha.outputs.short-sha }})
#        draft: false
#        prerelease: true
#        body: |
#          This experimental version of Agda is built automatically after every sucessful run of all test suites.

  nightly:
#    needs: setup
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            ghc-ver: 8.10.2.2
            cabal-ver: 3.2
          - os: macos-latest
            ghc-ver: 8.10.2
            cabal-ver: 3.2
          - os: ubuntu-latest
            ghc-ver: 8.10.2
            cabal-ver: 3.2

    env:
      ARGS: "-O0 --enable-executable-stripping --enable-library-stripping --disable-executable-profiling --disable-library-profiling --disable-debug-info" # Used by all OS
      LINUX_ARGS: "--ghc-options=-split-sections --enable-static --enable-executable-static"
      MACOS_ARGS: "--ghc-options=-split-sections --flags=enable-cluster-counting"
      # Liang-Ting (2020-12-8):
      # GHC fails to compile Agda with the ghc option -split-sections on Windows
      WIN64_ARGS: "--ghc-options=-split-sections"

    runs-on: ${{ matrix.os }}
    steps:
    - name: Determine the build variables
      id: vars
      run: |
        nightly=`echo Agda-nightly-${GITHUB_SHA::7}`

        echo ::set-output name=nightly::${nightly}

        if [[ "$OSTYPE" == "msys"* ]]; then
          echo "::set-output name=args::${ARGS} ${WIN64_ARGS}"
          filename="${nightly}-win64.zip"
          echo "::set-output name=filename::${filename}"
          echo "::set-output name=content-type::application/zip"
          echo "::set-output name=compress-cmd::7z a ${filename} ${nightly}"
        elif [[ "$OSTYPE" == "darwin"* ]]; then
          echo "::set-output name=args::${ARGS} ${MACOS_ARGS}"
          filename="${nightly}-macOS.tar.xz"
          echo "::set-output name=filename::${filename}"
          echo "::set-output name=content-type::application/x-xz"
          echo "::set-output name=compress-cmd::tar -a -cvf ${filename} ${nightly}"
        elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
          echo "::set-output name=args::${ARGS} ${MACOS_ARGS}"
          filename="${nightly}-linux.tar.xz"
          echo "::set-output name=filename::${filename}"
          echo "::set-output name=content-type::application/x-xz"
          echo "::set-output name=compress-cmd::tar -a -cvf ${filename} ${nightly}"
          echo "::set-output name=args::${ARGS} ${LINUX_ARGS}"
        fi
    - name: Check build variables
      run: |
        echo nightly=${{ steps.vars.outputs.nightly }}
        echo ${{ steps.vars.outputs.compress-cmd }}
        echo ${{ steps.vars.outputs.filename }}
        echo ${{ steps.vars.outputs.content-type }}
        echo ${{ steps.vars.outputs.args }}

    - uses: actions/checkout@v2

    - uses: haskell/actions/setup@v1
      id: setup-haskell
      with:
        ghc-version: ${{ matrix.ghc-ver }}
        cabal-version: ${{ matrix.cabal-ver }}

    - name: Add the path to icu4c to the cabal configuration (macOS)
      if: ${{ runner.os == 'macOS' }}
      run: |
        echo "extra-lib-dirs: /usr/local/opt/icu4c/lib">> ~/.cabal/config
        echo "extra-include-dirs: /usr/local/opt/icu4c/include" >> ~/.cabal/config

    - name: Configure the build plan
      run: |
        cabal configure ${{ steps.vars.outputs.args }}

    - uses: actions/cache@v2
      name: Cache dependencies
      id: cache
      with:
        path: |
          ${{ steps.setup-haskell.outputs.cabal-store }}
        # A unique cache is used for each stack.yaml.
        key: nightly-${{ runner.os }}-ghc-${{ matrix.ghc-ver }}-cabal-${{ hashFiles('**/plan.json') }}

    - name: Build dependencies
      if: ${{ !steps.cache.outputs.cache-hit }}
      run: cabal build exe:agda exe:agda-mode --only-dependencies -v0

    - name: Build Agda
      uses: nick-invision/retry@v2
      # Liang-Ting (2020-12-8):
      # Due to a ghc bug on Windows, it is necessary to build Agda twice (or more)
      # See:
      #   - https://github.com/agda/agda/issues/4543
      #   - https://gitlab.haskell.org/ghc/ghc/-/issues/18634
      with:
        max_attempts: 3
        timeout_minutes: 50
        retry_on: error
        command: cabal build exe:agda exe:agda-mode

    - name: Pack artefacts
      run: |
        mkdir -p ${{ steps.vars.outputs.nightly }}/bin
        cp -a src/data ${{ steps.vars.outputs.nightly }}

        if [[ "$OSTYPE" == "msys"* ]]; then
          find dist-newstyle/build -name '*.exe' -type f -exec cp {} ${{ steps.vars.outputs.nightly }}/bin \;
          cp -a .github/*.bat ${{ steps.vars.outputs.nightly }}
          C:/ProgramData/Chocolatey/bin/strip.exe ${{ steps.vars.outputs.nightly }}/bin/*
        else
          find dist-newstyle/build \( -name 'agda' -o -name 'agda-mode' \) -type f -exec cp {} ${{ steps.vars.outputs.nightly }}/bin \;
          cp -a .github/*.sh ${{ steps.vars.outputs.nightly }}
          strip ${{ steps.vars.outputs.nightly }}/bin/*
        fi

        ${{ steps.vars.outputs.compress-cmd }}

#    - name: Upload release artifacts
#      id: upload-release-asset
#      uses: actions/upload-release-asset@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        upload_url: ${{ needs.setup.outputs.upload-url }}
#        asset_path: ${{ steps.vars.outputs.filename }}
#        asset_name: ${{ steps.vars.outputs.filename }}
#        asset_content_type: ${{ steps.vars.outputs.content-type }}
#
    - uses: actions/upload-artifact@v2
      with:
        path: ${{ steps.vars.outputs.filename }}
        name: ${{ steps.vars.outputs.filename }}
        if-no-files-found: error
        retention-days: 1

  depoly:
    needs: nightly
    runs-on: Ubuntu-latest
    env:
      TAG_NAME: nightly
    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v2
      with:
        path: artifacts

    - name: Delete the nightly tag if any
      uses: dev-drprasad/delete-tag-and-release@v0.1.2
      continue-on-error: true
      with:
        delete_release: true
        tag_name: ${{ env.TAG_NAME }}
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Create nightly release
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        tag_name: ${{ env.TAG_NAME }}
        release_name: Nightly build
        draft: false
        prerelease: true
        body: |
          This experimental version of Agda is built automatically after every sucessful run of all test suites.

    - name: Upload artifacts as release assets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        assets=()
        for asset in artifacts/**/*; do
          assets+=("-a" "$asset")
        done
        hub release edit "${assets[@]}" ${{ env.TAG_NAME }}
