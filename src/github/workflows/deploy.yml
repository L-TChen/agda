name: Deploy

on:
  workflow_run:
    workflows: ["Build, Test, and Benchmark"]
    branches: [master]
    types:
      - completed
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  auto-cancel:
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: Ubuntu-latest
    steps:
    - uses: styfle/cancel-workflow-action@0.11.0
      with:
        access_token: ${{ github.token }}

  build:
    if: ${{ always() }}
    needs: auto-cancel
    strategy:
      fail-fast: false
      matrix:
        # Andreas, 2022-10-18
        # We stick to '-latest' virtual environments here in the sense of
        # "most canonical", since this is the deploy action.
        # As of today, this is [windows-2022, macOS-11, ubuntu-20.04].
        # Andreas, 2022-12-05, issue #6384:
        # Atm, building static executables with GHC 9.4 is broken on ubuntu-22.04,
        # so, we downgrade to ubuntu-20.04.
        os: [windows-latest, macos-latest, ubuntu-20.04]
        ghc-ver: ['9.4']
        cabal-ver: ['3.8']

    # env:
      # ARGS: "--disable-executable-profiling --disable-library-profiling"
      # Liang-Ting Chen (2021-01-01):
      # Cabal cannot compile statically with text-icu (required by the flag `enable-cluster-counting`),
      # see https://github.com/4e6/text-icu-static-example
      #
      # ASR (2022-06-01): The flag `--enable-split-sections` generates the warning
      # "-split-sections is not useful on this platform since it always uses subsections via symbols"
      # on MacOS (Issue #5940).
      # LINUX_ARGS: "--enable-executable-static  --enable-split-sections"
      # MACOS_ARGS: "--flags=enable-cluster-counting"
      # WIN64_ARGS: "--flags=enable-cluster-counting  --enable-split-sections"
    runs-on: ${{ matrix.os }}
    steps:

    - name: Setup Agda
      id: agda
      uses: wenkokke/setup-agda@latest
      with:
        agda-version: 'HEAD'
        bdist-compress-exe: true
        bdist-upload: true
        bdist-retention-days: 3
        force-cluster-counting: true
        force-no-optimise-heavily: true

          #- name: Move artefacts to ${{ steps.vars.outputs.nightly }}
          #  # TODO: Move this part to Makefile
          #  env:
          #    # Andreas, 2022-03-11, the ICU version has been updated upstream from 69 to 70
          #    # Andreas, 2022-09-20, the ICU version has been updated upstream from 70 to 71
          #    ICU_VER: '71'
          #    ICU_DIR: '/usr/local/opt/icu4c/lib'
          #    DLL:     "/c/msys64/mingw64/bin/libicu*.dll"
          #      ## was /c/icu4c/icu*.dll
          #  run: |
          #    nightly="${{ steps.vars.outputs.nightly }}"
          #    mkdir -p "${nightly}"/bin
          #    cp -a src/data "${nightly}"

          #    if [[ "$OSTYPE" == "msys"* ]]; then

          #      cp ${{ steps.agda.outputs.agda-exe }} "${nightly}"/bin/agda.exe
          #      cp ${{ steps.agda.outputs.agda-mode-exe }} "${nightly}"/bin/agda-mode.exe
          #      cp -a .github/*.bat "${nightly}"
          #      cp ${DLL} "${nightly}"/bin/
          #      C:/ProgramData/Chocolatey/bin/strip.exe "${nightly}"/bin/*

          #    else

          #      cp ${{ steps.agda.outputs.agda-exe }} "${nightly}"/bin/agda
          #      cp ${{ steps.agda.outputs.agda-mode-exe }} "${nightly}"/bin/agda-mode
          #      strip "${nightly}"/bin/*
          #      cp -a .github/*.sh "${nightly}"

          #      if [[ "$OSTYPE" == "darwin"* ]]; then

          #      # Change the path to the dynamic library icu4c to the run-time search path:
          #      #
          #      # 1. the same directory of executable, i.e. @executable_path
          #      # 2. @executable_path/../lib
          #      # 3. the default location of system-wide icu4c installed by homebrew, ie. /usr/local/opt/icu4c/lib
          #      #
          #      mkdir "${nightly}"/lib
          #      cp ${ICU_DIR}/libicuuc.${ICU_VER}.dylib ${ICU_DIR}/libicui18n.${ICU_VER}.dylib ${ICU_DIR}/libicudata.${ICU_VER}.dylib "${nightly}"/lib
          #      install_name_tool -change ${ICU_DIR}/libicuuc.${ICU_VER}.dylib @rpath/libicuuc.${ICU_VER}.dylib "${nightly}"/bin/agda
          #      install_name_tool -change ${ICU_DIR}/libicui18n.${ICU_VER}.dylib @rpath/libicui18n.${ICU_VER}.dylib "${nightly}"/bin/agda
          #      install_name_tool -add_rpath @executable_path -add_rpath @executable_path/../lib -add_rpath ${ICU_DIR} "${nightly}"/bin/agda
          #      otool -L "${nightly}"/bin/agda

          #      fi
          #    fi

          #    file ${{ steps.vars.outputs.nightly }}/bin/agda

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with:
        path: artifacts
    - name: Delete the nightly tag if any
      uses: dev-drprasad/delete-tag-and-release@v0.2.0
      with:
        delete_release: true
        tag_name: 'nightly'
      env:
        GITHUB_TOKEN: ${{ github.token }}
    - name: Create a nightly release and upload artifacts as release assets
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        assets=()
        for asset in artifacts/**/*; do
          assets+=("-a" "$asset")
        done

        sha=${{ github.sha }}
        hub release create "${assets[@]}" -m "Nightly Build (${sha:0:7}@${{ github.ref_name }})" 'nightly'
